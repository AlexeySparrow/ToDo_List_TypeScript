{"version":3,"sources":["Components/TodoList/TodoList.module.scss","App.module.scss","Components/InputTodo/InputTodo.module.scss","Components/InputTodo/InputTodo.tsx","Components/DeleteIcon.tsx","Components/TodoList/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","InputTodo","props","useState","inputText","setInputText","className","style","input","type","placeholder","value","onChange","event","target","onKeyPress","length","key","addString","DeleteIcon","width","version","xmlns","height","viewBox","fill","d","x","y","TodoList","list","todos","map","todo","classNames","check","push","completed","join","checked","checkedHandler","id","text","onClick","removeHandler","App","setTodos","useEffect","saveLocal","JSON","parse","localStorage","getItem","setItem","stringify","wrapper","container","Date","now","prev","window","confirm","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e066a86.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"TodoList_list__V6Scx\",\"completed\":\"TodoList_completed__MEf6T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__1v8Lt\",\"container\":\"App_container__36Pbz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputTodo_input__24MEU\"};","import React, {useState} from \"react\";\r\nimport style from './InputTodo.module.scss';\r\n\r\ninterface IInputTodo {\r\n    addString(text: string): void\r\n}\r\n\r\nexport const InputTodo: React.FC<IInputTodo> = (props) => {\r\n\r\n    //value input\r\n    const [inputText, setInputText] = useState<string>('')\r\n\r\n    //dispatch value\r\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputText(event.target.value)\r\n    }\r\n\r\n    //send element in list at click button \"Enter\"\r\n    const keyHandler = (event: React.KeyboardEvent) => {\r\n        if (inputText.length > 0) {\r\n            if (event.key === 'Enter') {\r\n                props.addString(inputText)\r\n                setInputText('')\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.input}>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Введите задачу\"\r\n                value={inputText}\r\n                onChange={changeHandler}\r\n                onKeyPress={keyHandler}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const DeleteIcon: React.FC = () => {\r\n    return (\r\n        <svg width=\"30\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" height=\"30\" viewBox=\"0 0 64 64\">\r\n            <g>\r\n                <g fill=\"rgba(247, 72, 72, 1)\">\r\n                    <path\r\n                        d=\"m11.13,63.764h41.786c1.184,0 2.14-0.958 2.14-2.141v-38.568h0.965c1.183,0 2.14-0.958 2.14-2.141v-10.985c0-1.182-0.957-2.141-2.14-2.141h-13.052v-5.357c0-1.182-0.957-2.141-2.14-2.141h-17.603c-1.184,0-2.142,0.958-2.142,2.141v5.357h-13.058c-1.185,0-2.142,0.958-2.142,2.141v10.985c0,1.183 0.957,2.141 2.142,2.141h0.963v38.568c1.77636e-15,1.182 0.958,2.141 2.141,2.141zm14.235-59.192h13.323v2.588h-13.323v-2.588zm25.41,54.91h-37.504v-36.427h37.505v36.427zm-40.61-47.413h43.713v6.704h-0.963-41.786-0.964v-6.704z\"/>\r\n                    <rect width=\"2.676\" x=\"20.098\" y=\"27.548\" height=\"27.441\"/>\r\n                    <rect width=\"2.676\" x=\"30.414\" y=\"27.548\" height=\"27.441\"/>\r\n                    <rect width=\"2.675\" x=\"40.723\" y=\"27.548\" height=\"27.441\"/>\r\n                </g>\r\n            </g>\r\n        </svg>\r\n    )\r\n}","import React from \"react\";\r\nimport {ITodo} from \"../../interfaces\";\r\nimport style from './TodoList.module.scss';\r\nimport {DeleteIcon} from \"../DeleteIcon\";\r\n\r\ninterface ITodoList {\r\n    todos: Array<ITodo>\r\n\r\n    removeHandler(id: number): void\r\n\r\n    checkedHandler(id: number): void\r\n}\r\n\r\nexport const TodoList: React.FC<ITodoList> = (props) => {\r\n    return (\r\n        <div className={style.list}>\r\n            {\r\n                props.todos.length === 0 ? <p>Пока дел нет!</p> : props.todos.map(todo => {\r\n\r\n                    //add class if input[checkbox] - active\r\n                    const classNames: Array<string> = []\r\n                    if (todo.check) {\r\n                        classNames.push(style.completed)\r\n                    }\r\n\r\n                    return (\r\n                        <div className={classNames.join(' ')} key={todo.id}>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={todo.check}\r\n                                onChange={() => {\r\n                                    props.checkedHandler(todo.id)\r\n                                }}\r\n                            />\r\n                            <span>{todo.text}</span>\r\n                            <i className=\"vbk\" onClick={() => {\r\n                                props.removeHandler(todo.id)\r\n                            }}><DeleteIcon/></i>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\nimport {InputTodo} from \"./Components/InputTodo/InputTodo\";\nimport {TodoList} from \"./Components/TodoList/TodoList\";\nimport {ITodo} from './interfaces';\nimport style from './App.module.scss';\n\nconst App: React.FC = () => {\n    //array of all strings to do\n    const [todos, setTodos] = useState<Array<ITodo>>([])\n\n    //move all lines to do in localstorage\n    useEffect(() => {\n        const saveLocal = JSON.parse(localStorage.getItem('todos') || '[]') as Array<ITodo>\n        setTodos(saveLocal)\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('todos', JSON.stringify(todos))\n    }, [todos])\n\n    //dispatch elements list to do in main array\n    const addString = (text: string) => {\n        let inputText: ITodo = {\n            id: Date.now(),\n            text: text,\n            check: false\n        }\n        setTodos(prev => [inputText, ...prev])\n    }\n\n    //dispatch boolean value in todos[check]\n    const checkedHandler = (id: number) => {\n        setTodos(prev => prev.map(todo => {\n            if (todo.id === id) {\n                return {...todo, check: !todo.check}\n            }\n            return todo\n        }))\n    }\n\n    //remove element at click button\n    const removeHandler = (id: number) => {\n        const questionRemove: boolean = window.confirm('Вы уверены, что хотите удалить запись?')\n        if (questionRemove) {\n            setTodos(prev => prev.filter(todo => todo.id !== id))\n        }\n    }\n\n    return (\n        <div className={style.wrapper}>\n            <div className={style.container}>\n                <InputTodo addString={addString}/>\n                <TodoList todos={todos}\n                          checkedHandler={checkedHandler}\n                          removeHandler={removeHandler}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './assets/scss/_zeroStyle.scss';\nimport './assets/scss/_fonts.scss';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}